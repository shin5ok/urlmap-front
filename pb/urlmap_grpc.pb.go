// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: urlmap.proto

package urlmap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RedirectionClient is the client API for Redirection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedirectionClient interface {
	GetOrgByPath(ctx context.Context, in *RedirectPath, opts ...grpc.CallOption) (*OrgUrl, error)
	GetInfoByUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*ArrayRedirectData, error)
	SetInfo(ctx context.Context, in *RedirectData, opts ...grpc.CallOption) (*OrgUrl, error)
	SetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	RemoveUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Users, error)
	PingPongMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type redirectionClient struct {
	cc grpc.ClientConnInterface
}

func NewRedirectionClient(cc grpc.ClientConnInterface) RedirectionClient {
	return &redirectionClient{cc}
}

func (c *redirectionClient) GetOrgByPath(ctx context.Context, in *RedirectPath, opts ...grpc.CallOption) (*OrgUrl, error) {
	out := new(OrgUrl)
	err := c.cc.Invoke(ctx, "/urlmap.Redirection/GetOrgByPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redirectionClient) GetInfoByUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*ArrayRedirectData, error) {
	out := new(ArrayRedirectData)
	err := c.cc.Invoke(ctx, "/urlmap.Redirection/GetInfoByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redirectionClient) SetInfo(ctx context.Context, in *RedirectData, opts ...grpc.CallOption) (*OrgUrl, error) {
	out := new(OrgUrl)
	err := c.cc.Invoke(ctx, "/urlmap.Redirection/SetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redirectionClient) SetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/urlmap.Redirection/SetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redirectionClient) RemoveUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/urlmap.Redirection/RemoveUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redirectionClient) ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/urlmap.Redirection/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redirectionClient) PingPongMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/urlmap.Redirection/PingPongMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedirectionServer is the server API for Redirection service.
// All implementations should embed UnimplementedRedirectionServer
// for forward compatibility
type RedirectionServer interface {
	GetOrgByPath(context.Context, *RedirectPath) (*OrgUrl, error)
	GetInfoByUser(context.Context, *User) (*ArrayRedirectData, error)
	SetInfo(context.Context, *RedirectData) (*OrgUrl, error)
	SetUser(context.Context, *User) (*User, error)
	RemoveUser(context.Context, *User) (*emptypb.Empty, error)
	ListUsers(context.Context, *emptypb.Empty) (*Users, error)
	PingPongMessage(context.Context, *Message) (*Message, error)
}

// UnimplementedRedirectionServer should be embedded to have forward compatible implementations.
type UnimplementedRedirectionServer struct {
}

func (UnimplementedRedirectionServer) GetOrgByPath(context.Context, *RedirectPath) (*OrgUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgByPath not implemented")
}
func (UnimplementedRedirectionServer) GetInfoByUser(context.Context, *User) (*ArrayRedirectData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoByUser not implemented")
}
func (UnimplementedRedirectionServer) SetInfo(context.Context, *RedirectData) (*OrgUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInfo not implemented")
}
func (UnimplementedRedirectionServer) SetUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUser not implemented")
}
func (UnimplementedRedirectionServer) RemoveUser(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedRedirectionServer) ListUsers(context.Context, *emptypb.Empty) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedRedirectionServer) PingPongMessage(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingPongMessage not implemented")
}

// UnsafeRedirectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedirectionServer will
// result in compilation errors.
type UnsafeRedirectionServer interface {
	mustEmbedUnimplementedRedirectionServer()
}

func RegisterRedirectionServer(s grpc.ServiceRegistrar, srv RedirectionServer) {
	s.RegisterService(&Redirection_ServiceDesc, srv)
}

func _Redirection_GetOrgByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedirectPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedirectionServer).GetOrgByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlmap.Redirection/GetOrgByPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedirectionServer).GetOrgByPath(ctx, req.(*RedirectPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redirection_GetInfoByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedirectionServer).GetInfoByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlmap.Redirection/GetInfoByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedirectionServer).GetInfoByUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redirection_SetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedirectData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedirectionServer).SetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlmap.Redirection/SetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedirectionServer).SetInfo(ctx, req.(*RedirectData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redirection_SetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedirectionServer).SetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlmap.Redirection/SetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedirectionServer).SetUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redirection_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedirectionServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlmap.Redirection/RemoveUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedirectionServer).RemoveUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redirection_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedirectionServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlmap.Redirection/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedirectionServer).ListUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redirection_PingPongMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedirectionServer).PingPongMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/urlmap.Redirection/PingPongMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedirectionServer).PingPongMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// Redirection_ServiceDesc is the grpc.ServiceDesc for Redirection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Redirection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "urlmap.Redirection",
	HandlerType: (*RedirectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrgByPath",
			Handler:    _Redirection_GetOrgByPath_Handler,
		},
		{
			MethodName: "GetInfoByUser",
			Handler:    _Redirection_GetInfoByUser_Handler,
		},
		{
			MethodName: "SetInfo",
			Handler:    _Redirection_SetInfo_Handler,
		},
		{
			MethodName: "SetUser",
			Handler:    _Redirection_SetUser_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _Redirection_RemoveUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Redirection_ListUsers_Handler,
		},
		{
			MethodName: "PingPongMessage",
			Handler:    _Redirection_PingPongMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "urlmap.proto",
}
